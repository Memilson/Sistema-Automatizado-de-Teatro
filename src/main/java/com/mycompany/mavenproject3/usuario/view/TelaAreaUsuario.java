package com.mycompany.mavenproject3.usuario.view;

import com.mycompany.mavenproject3.login.view.TelaLogin;
import com.mycompany.mavenproject3.usuario.controller.AreaUsuarioController;
import com.mycompany.mavenproject3.usuario.dto.UsuarioDashboardDTO;
import org.json.JSONArray;

import javax.swing.*;
import java.awt.*;

public class TelaAreaUsuario extends JFrame {

    private final AreaUsuarioController controller;

    public TelaAreaUsuario(AreaUsuarioController controller) {
        this.controller = controller;

        String userId = controller.getUserIdLogado();
        if (userId == null) {
            JOptionPane.showMessageDialog(null, "Voc√™ precisa estar logado.");
            new TelaLogin();
            dispose();
            return;
        }

        UsuarioDashboardDTO dto = controller.carregarDashboard(userId);
        if (dto == null) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados.");
            dispose();
            return;
        }

        setTitle("√Årea do Usu√°rio");
        setSize(600, 750);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(0, 1, 8, 8));

        add(new JLabel("üë§ Nome:"));                 add(new JLabel(dto.getNome()));
        add(new JLabel("üìÑ CPF:"));                  add(new JLabel(dto.getCpf()));
        add(new JLabel("üìÖ Nascimento:"));           add(new JLabel(dto.getNascimento()));
        add(new JLabel("üìå Assinatura:"));           add(new JLabel(dto.getAssinaturaNome()));
        add(new JLabel("‚≠ê Ingressos VIP/m√™s:"));     add(new JLabel(String.valueOf(dto.getIngressosVipMes())));
        add(new JLabel("‚è±Ô∏è Prioridade reserva (h):")); add(new JLabel(String.valueOf(dto.getPrioridadeReservaHoras())));
        add(new JLabel("üí∏ Desconto (%):"));         add(new JLabel(String.valueOf(dto.getDescontoPercentual())));
        add(new JLabel("üìÜ Tipo de pagamento:"));    add(new JLabel(dto.getTipoPagamento()));
        add(new JLabel("üïì √öltima compra:"));        add(new JLabel(dto.getUltimaCompra()));
        add(new JLabel("‚úÖ VIPs usados este m√™s:")); add(new JLabel(String.valueOf(dto.getUsadosVip())));
        add(new JLabel("üéüÔ∏è VIPs restantes:"));      add(new JLabel(String.valueOf(dto.getRestantesVip())));

        JButton botaoCartao = new JButton("üí≥ Cadastrar Cart√£o");
        JButton botaoPlano = new JButton("üì¶ Mudar Plano");

        botaoCartao.addActionListener(e -> {
            JTextField campoNumero = new JTextField();
            JTextField campoValidade = new JTextField();
            JTextField campoCVV = new JTextField();
            JTextField campoNome = new JTextField();

            JPanel painel = new JPanel(new GridLayout(0, 1));
            painel.add(new JLabel("N√∫mero do cart√£o:"));
            painel.add(campoNumero);
            painel.add(new JLabel("Validade (MM/AA):"));
            painel.add(campoValidade);
            painel.add(new JLabel("CVV:"));
            painel.add(campoCVV);
            painel.add(new JLabel("Nome no cart√£o:"));
            painel.add(campoNome);

            int resposta = JOptionPane.showConfirmDialog(this, painel, "Cadastrar Cart√£o", JOptionPane.OK_CANCEL_OPTION);
            if (resposta == JOptionPane.OK_OPTION) {
                controller.marcarCartaoComoVerificado();
                JOptionPane.showMessageDialog(this, "Cart√£o salvo com sucesso! Plano liberado.");
            }
        });

        botaoPlano.addActionListener(e -> {
            if (!controller.isCartaoVerificado()) {
                JOptionPane.showMessageDialog(this, "Voc√™ precisa cadastrar um cart√£o antes de mudar o plano.");
                return;
            }

            try {
                JSONArray planos = controller.buscarPlanos();

                if (planos.length() == 0) {
                    JOptionPane.showMessageDialog(this, "Nenhum plano dispon√≠vel.");
                    return;
                }

                String[] nomes = controller.extrairNomesPlanos(planos);
                JComboBox<String> combo = new JComboBox<>(nomes);

                int resultado = JOptionPane.showConfirmDialog(this, combo, "Selecione o novo plano", JOptionPane.OK_CANCEL_OPTION);
                if (resultado == JOptionPane.OK_OPTION) {
                    String nomeSelecionado = (String) combo.getSelectedItem();
                    String idSelecionado = controller.encontrarIdPlano(planos, nomeSelecionado);

                    boolean sucesso = controller.atualizarPlano(userId, idSelecionado);
                    JOptionPane.showMessageDialog(this, sucesso ? "Plano atualizado com sucesso!" : "Erro ao atualizar plano.");
                }

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao carregar os planos.");
            }
        });

        add(botaoCartao);
        add(botaoPlano);

        setVisible(true);
    }
}
